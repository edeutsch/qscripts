#!/bin/bash
#
# Program: qcomet
# Author:  Eric Deutsch
#
# Copyright (C) 2009-2022 by Eric Deutsch
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the Apache 2.0 License.
#                                                                           
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# full license for more details.                                  
#                                                                           
# You should have received a copy of the Apache 2.0 License
# along with this library; if not, please see the original source at
# https://github.com/edeutsch/qscripts
# 
# Institute for Systems Biology
# 401 Terry Avenue North
# Seattle WA 98109 USA
# spctools@systemsbiology.org
#

#### Import a common set of functions
source qscript_functions

#### Verify the hosts that this can be run on
assert_old_or_new_cluster_head_node


# -- Local settings -----------------------------------------------------------

  # Set TESTMODE to some value to do everything but actually submit the jobs
  TESTMODE=${TESTMODE:-}

  # Default name for jobs in queue
  QNAME=${QNAME:-}

  # Default project to submit jobs to
  QPROJECT=${QPROJECT:-}

  # Limit to the number of cores (threads)
  MAX_PROCS=${MAX_PROCS:-256}

  # Default number of cores (threads) for one job
  NP=${NP:-32}

  # Default qsub flags
  QSUBFLAGS="${QSUBFLAGS:-}"
  
  # Programs
  JAVA=${JAVA-`which java 2>/dev/null || echo ''`}
  MSFRAGGER=${MSFRAGGER-/proteomics/sw/MSFragger/MSFragger-3.2-rc17/msfragger-3.2-rc17.one-jar.jar}


# -----------------------------------------------------------------------------

# 
# Usage statement
#
function usage() {
   [ "$1" ] && echo "$(basename $0): $*" 1>&2
   echo "Usage:"
   echo "$(basename $0) [options] $EXTS [-- [sbatch options]]"
   echo
   echo "Options:"
   echo "   -h, --help          help"
   echo "   -m, --manual        manual"
   echo "   -p,--params <file>  parameter file to use (defaults to ${PROG:-<search>}.params)"
   echo "   -q,--queue <queue>  name of the queue to which the jobs will be submitted (urgent, active, slow, xlarge)"
   echo "   -o,--out-dir <dir>  destination directory for output files"
   echo "   -s,--split <n>      number of pieces to split search into (for large search spaces) (default 1)"
   echo "   -b,--batch <n>      number of msrun to batch together in a single job (default 5)"
   echo
   echo "   [sbatch options]      all flags following '--' are passed to sbatch"
   echo
   exit 1
}

#
# All of the MS-MS search commands (qtandem, qinspect, ...) should have a
# the same search options
#
#   Sets INPUTS to list of input files to search
#   Sets P_OPT to be the search parameter file
#   Sets V_OPT if provided on command line
#   Appends any qsub flags to QSUBFLAGS 
#
function options() {
   P_OPT=$1; shift
   EXTS=$1; shift
   B_OPT=5

   INPUTS=
   while [ "$1" ]; do
      case "$1" in 
      --)
         shift
         QSUBFLAGS+=" $*"
         break
         ;;
      -h|--help)
         usage
         ;;
      -m|--man)
         POD=`dirname $0`/qgrid_functions
         pod2man -n 'HPC TOOLS' -r 'HPC TOOLS' \
            -c 'Trans-Proteomic Pipeline (TPP)' $POD | nroff -man | less
         exit
         ;;
      -p|--params)
         P_OPT="$2"
         shift 2
         ;;
      -s|--split)
         S_OPT="$2"
         shift 2
         ;;
      -b|--batch)
         B_OPT="$2"
         shift 2
         ;;
      -q|--queue)
         Q_OPT="$2"
         shift 2
         ;;
      -o|--out-dir)
         O_OPT="$2"
         shift 2
         ;;
      -v|--verbose)
         V_OPT="true"
         shift
         ;;
      -*)
         search_usage "invalid option $1"
         ;;
      *)
         eval "case "$1" in $EXTS) ;; *) search_usage "invalid file $1";; esac"
         [ -f "$1" ] || die "$1 file not found"
         INPUTS+=" $1"
         shift
         ;;
      esac
   done

   [ -z "$INPUTS" ] && die "ERROR: missing one or more input files. Use -h for help on usage."
   [ -z "$P_OPT" ] && die "Missing required .params file. Use -h for help on usage."
   [ -f "$P_OPT" ] || die "Error '$P_OPT' parameters file not found. Use -h for help on usage."

if [ ! -z "$O_OPT" ]; then
      mkdir -p "$O_OPT"
      O_OPT=$(rel2abs "$O_OPT")
   fi

   #### Set the QQUEUE value
   if [ ! -z "$Q_OPT" ]; then
      QQUEUE=$Q_OPT
   else
      QQUEUE=active
   fi

   
   true                 # return "status"
}



#
# Read in msfragger parameters file. 
#
function check_params() {

  if [ ${QNAME} == "xlarge" ]; then
    MAX_PROCS=256
  else
    MAX_PROCS=80
  fi

  NP=$(perl -ne 'print $1 if /^\s*num_threads\s*=\s*(\d+)/' $P_OPT)
  if [[ $NP -eq 0 || $NP -gt "$MAX_PROCS" ]]; then
    die "ERROR: the num_threads parameter in your msfragger.params file should be set to value between 1 and $MAX_PROCS"
  fi

  DATABASENAME=$(perl -ne 'print $1 if /^\s*database_name\s*=\s*(\S+)/' $P_OPT)
  if [ -z $DATABASENAME ]; then
    die "ERROR: the database_name parameter in your msfragger.params file needs to be present"
  fi
  if [ ! -f $DATABASENAME ]; then
    die "ERROR: the database_name specified in msfragger.params file '$DATABASENAME' cannot be found"
  fi

  if [[ $NP -eq 0 ]]; then
      QSUBFLAGS="-pe serial ${MAX_PROCS} ${QSUBFLAGS}"
  else
      QSUBFLAGS="-pe serial ${NP} ${QSUBFLAGS}"
  fi
}


#
# List of commands to run in the qsub script.  Commands are echo'ed out and
# are intended to be read in by the qsubmit() function.
#
function setcmds() {

   prog=msfragger
   
   params="$(rel2abs $P_OPT)"

   # Remove previous results
   rm -f $odir$root.pep.xml  $odir$root.$prog.qlog

   REQUESTGB=80
   if [ "$HOST" == "regis12" ]; then
     REQUESTGB=60
   fi

   if [ ! -z "$files" ]; then
      file=$files
   fi

   # If there is no splitting or split is 1, then just run msfragger directly
   if [[ -z $S_OPT || $S_OPT -eq 0 || $S_OPT -eq 1 ]]; then
     cmds=$(cat <<EOF
cd '${odir:-$PWD}'
export LC_ALL=C
/bin/java -Xmx${REQUESTGB}G -jar $MSFRAGGER $params $files

EOF
)

   else

     cmds=$(cat <<EOF
cd '${odir:-$PWD}'
export LC_ALL=C
python3 /proteomics/sw/bin/msfragger_pep_split.py $S_OPT "/bin/java -Xmx${REQUESTGB}G -jar" $MSFRAGGER $params $files

EOF
)

   fi


  if [ -z "$roots" ]; then
     roots=$root
  fi

  for root in $roots; do
     cmds+=$(cat <<EOF

mv $root.pepXML $root.pep.xml
updatepaths.pl -d $DATABASENAME $root.pep.xml
replacehere 'X! Tandem' 'MSFragger' $root.pep.xml


EOF
)

  done

}


# -- Main ----------------------------------------------------------------------

# Set up the appropriate common functions
if [ "$HOST" == "regis" ]; then
  source qgrid_functions
fi
if [ "$HOST" == "regis12" ] || [ "$HOST" == "regis-dev-new" ] || [ "$HOST" == "regis-web-new" ]; then
  source slurm_functions
fi

# Check for necessary programs
[ -x "${JAVA}" ] || die "ERROR: There is no java in your PATH"

# Set up the search options
options msfragger.params '*.mzML|*.mzXML|*.mgf|*.mzML.gz|*.mzXML.gz' $*
check_params

submit_jobs

exit 0
